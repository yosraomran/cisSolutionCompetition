# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IYFMtkYcvpZanN6eb7aGA0dFDuRuA8lK
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression

# lire le fichier xlsx avec Pandas
df = pd.read_excel("IEEE.xlsx")
#affichage de dataFrame
print(df)

#classer les données sur target et features
target = df["Les Urgences En MED DENT"]
features = df.drop(columns="Les Urgences En MED DENT")

#descritption descriptive de données
df.describe()

from sklearn.model_selection import train_test_split
#split dataFrame to train data and test data
data_train, data_test, target_train, target_test = train_test_split( features, target, random_state=33)

#encodage des données de categoriel type au entier 
for col in (data_train.columns):
  le = LabelEncoder()
  data_train[col] = le.fit_transform(data_train[col])

#description de données de traitement
data_train.describe()

#Normalisation des données
scaler = StandardScaler()
scaler.fit(data_train)
data_train = scaler.transform(data_train)

#redimenssionner les données utilisant PCA
pca = PCA(n_components=11)
pca_data = pca.fit_transform(data_train)

#classer les données  sur data_train et data_validation
data_t, data_validation, target_t, target_validation = train_test_split( pca_data, target_train, random_state=33)

from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression

#decisiontree
ModelDT = DecisionTreeClassifier(max_depth=50)
ModelDT.fit(data_t, target_t)
sc = ModelDT.score(data_validation, target_validation)
print('score de la model DecisionTree est ', round(sc*100),"%")

#visualisation de tree
from sklearn import tree

clf = tree.DecisionTreeClassifier()
clf = clf.fit(data_t, target_t)
tree.plot_tree(clf)

#encodage de data test
for col in (data_test.columns):
  le = LabelEncoder()
  data_test[col] = le.fit_transform(data_test[col])
print(data_test.head(5)) 
# Prédiction sur les données de test
data_test = scaler.transform(data_test)
pca_test = pca.transform(data_test)
prediction = ModelDT.predict(pca_test)

# Évaluation du modèle
from sklearn.metrics import classification_report
print(classification_report(target_test, prediction))

# Prédiction sur une nouvelle observation
new_observation = [[3, 1, 1, 1, 2, 0, 0, 0, 1, 0, 1]] # exemple de ligne à prédire
new_observation = scaler.transform(new_observation)
new_observation = pca.transform(new_observation)
prediction_new_observation = ModelDT.predict(new_observation)
print("La prédiction pour la nouvelle observation est :", prediction_new_observation)

#KNeighborsClassifier
ModelKNN = KNeighborsClassifier(n_neighbors=7)
ModelKNN.fit(data_t, target_t)
sc = ModelKNN.score(data_validation, target_validation)
print('score de la model KNN est ', round(sc*100),"%")

# Prédiction sur les données de test
data_test = scaler.transform(data_test)
pca_test = pca.transform(data_test)
prediction = ModelKNN.predict(pca_test)

# Évaluation du modèle
from sklearn.metrics import classification_report
print(classification_report(target_test, prediction))


# Prédiction sur une nouvelle observation
new_observation = [[3, 1, 1, 1, 2, 0, 0, 0, 1, 0, 1]] # exemple de ligne à prédire
new_observation = scaler.transform(new_observation)
new_observation = pca.transform(new_observation)
prediction_new_observation = ModelKNN.predict(new_observation)
print("La prédiction pour la nouvelle observation est :", prediction_new_observation)

#Logistic Regression
ModelLR = LogisticRegression(C =0.1)
ModelLR.fit(data_t, target_t)
sc = ModelLR.score(data_validation, target_validation)
print('score de la model LogisticRegression est ', round(sc*100),"%")

# Prédiction sur les données de test
data_test = scaler.transform(data_test)
pca_test = pca.transform(data_test)
prediction = ModelLR.predict(pca_test)

# Évaluation du modèle
from sklearn.metrics import classification_report
print(classification_report(target_test, prediction))

# Prédiction sur une nouvelle observation
new_observation = [[3, 1, 1, 1, 2, 0, 0, 0, 1, 0, 1]] # exemple de ligne à prédire
new_observation = scaler.transform(new_observation)
new_observation = pca.transform(new_observation)
prediction_new_observation = ModelLR.predict(new_observation)
print("La prédiction pour la nouvelle observation est :", prediction_new_observation)